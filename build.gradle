import java.nio.charset.StandardCharsets

buildscript {
    allprojects {
        ext {
            springBootVersion = "3.1.5"
            springDependencyManagement = "1.1.3"
            springCloudDependencyVersion = "2022.0.0-RC2"
            springDocVersion = "2.2.0"
            logstashVersion = "7.2"
            mapstructVersion = "1.5.2.Final"
            jakartaInjectVersion = "2.0.1"
            feignVersion = "4.0.2"
            h2Version = "2.2.220"
            junitVersion = "4.13.1"
            assertjVersion = "3.23.1"
            jupiterVersion = "5.9.0"
            jupiterEngineVersion = "5.8.2"
            awaitilityVersion = "4.2.0"
            wiremockVersion = "3.0.4"
            restAssuredVersion = "5.3.2"
            lombokVersion = "1.18.24"
            archUnitVersion = "1.1.0"
            sonarqubeVersion = "3.3"
        }
        repositories {
            mavenCentral()
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagement}"
    id 'org.sonarqube' version "${sonarqubeVersion}"
    id 'jacoco'
}

group = 'br.com.portifolify'

bootJar {
    enabled = false
}

jar {
    enabled = true
}

subprojects {
    apply plugin: 'pmd'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.sonarqube'
    apply plugin: 'jacoco'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    compileJava.options.encoding = StandardCharsets.UTF_8.displayName()

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
        }
    }

    checkstyle {
        toolVersion = '8.36'
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        maxErrors = 0
        maxWarnings = 0
        ignoreFailures = false
    }

    pmd {
        ruleSetFiles("$rootProject.projectDir/config/pmd/pmd.xml")
        ruleSets = []
    }

    test {
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        executionData.setFrom(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))

        reports {
            xml.required = true
        }

        dependsOn test
    }

    sonarqube {
        properties {
            property "sonar.organization", "viavarejo-internal"
            property "sonar.projectKey", "viavarejo-internal_your-application-name-here"
            property "sonar.java.coveragePlugin", "jacoco"
            property "sonar.coverage.exclusions" , "**/ApplicationStartup.java, **/config/**, **/exception/**"
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

compileJava.doFirst {
    println "Source compatibility: " + sourceCompatibility
    println "Java version:" + JavaVersion.current()
}
